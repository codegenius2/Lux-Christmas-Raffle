declare function generateClientId(): string;

declare enum clientNames {
    reactUi = "client-sdk-react-ui",
    vanillaUi = "client-sdk-vanilla-ui"
}
declare enum baseUrls {
    prod = "https://www.crossmint.io",
    staging = "https://staging.crossmint.io/",
    dev = "http://localhost:3001"
}
declare enum customHeaders {
    clientVersion = "X-Client-Version",
    clientName = "X-Client-Name"
}
declare type theme = "light" | "dark";
declare type paymentMethods = "fiat" | "ETH" | "SOL";
declare const paymentMethodIsEth: (paymentMethod?: paymentMethods | undefined) => boolean;
declare const paymentMethodIsSol: (paymentMethod?: paymentMethods | undefined) => boolean;
declare type SigninMethods = "metamask" | "solana";
declare enum mintingContractTypes {
    CANDY_MACHINE = "candy-machine",
    SOLANA_AUCTION = "solana-auction",
    ERC_721 = "erc-721"
}
declare enum onboardingRequestStatusResponse {
    WAITING_SUBMISSION = "waiting-submission",
    PENDING = "pending",
    REJECTED = "rejected",
    ACCEPTED = "accepted",
    INVALID = "invalid"
}
interface PayButtonConfig {
    type: string;
    [propName: string]: any;
}
interface StatusButtonConfig {
    [propName: string]: any;
}
interface BaseButtonProps {
    className?: string;
    disabled?: boolean;
    tabIndex?: number;
    clientId: string;
    auctionId?: string;
    theme?: theme;
    platformId?: string;
    mintConfig?: StatusButtonConfig;
    environment?: string;
}
interface CrossmintPayButtonProps extends BaseButtonProps {
    mintTo?: string;
    emailTo?: string;
    listingId?: string;
    showOverlay?: boolean;
    dismissOverlayOnClick?: boolean;
    hideMintOnInactiveClient?: boolean;
    mintConfig?: PayButtonConfig;
    whPassThroughArgs?: any;
    paymentMethod?: paymentMethods;
    preferredSigninMethod?: SigninMethods;
}
declare type OnboardingQueryParams = {
    clientId: string;
    platformId?: string;
    auctionId?: string;
    mintConfig?: string;
};

interface CrossmintModalServiceParams {
    clientId: string;
    libVersion: string;
    showOverlay: boolean;
    dismissOverlayOnClick?: boolean;
    setConnecting: (connecting: boolean) => void;
    environment?: string;
    clientName: clientNames;
}
interface CrossmintModalServiceReturn {
    connect: (mintConfig: PayButtonConfig, mintTo?: string, emailTo?: string, listingId?: string, whPassThroughArgs?: any, paymentMethod?: paymentMethods, preferredSigninMethod?: SigninMethods) => void;
}
declare function crossmintModalService({ clientId, libVersion, showOverlay, dismissOverlayOnClick, setConnecting, environment, clientName, }: CrossmintModalServiceParams): CrossmintModalServiceReturn;

interface IProps {
    onClick?: (e: any) => void;
    connecting: boolean;
    paymentMethod?: paymentMethods;
}
declare function crossmintPayButtonService({ onClick, connecting, paymentMethod }: IProps): {
    getButtonText: (connecting: boolean) => "Connecting..." | "Buy with ETH" | "Buy with SOL" | "Buy with credit card";
    shouldHideButton: ({ hideMintOnInactiveClient, status }: any) => any;
    handleClick: (event: any, cb: () => void) => void;
};

interface CrossmintStatusServiceParams {
    libVersion: string;
    clientId: string;
    platformId?: string;
    auctionId?: string;
    mintConfig: any;
    setStatus: any;
    environment?: string;
    clientName: clientNames;
}
declare function crossmintStatusService({ libVersion, clientId, platformId, auctionId, mintConfig, setStatus, environment, clientName, }: CrossmintStatusServiceParams): {
    fetchClientIntegration: () => Promise<void>;
    goToOnboarding: () => void;
};

interface CrossmintStatusButtonServiceProps {
    onClick?: (e: any) => void;
}
declare function crossmintStatusButtonService({ onClick }: CrossmintStatusButtonServiceProps): {
    getButtonText: (status: onboardingRequestStatusResponse) => "Invalid clientId" | "Click here to setup Crossmint" | "Your application is under review" | "You're good to go!" | "Your application was rejected";
    isButtonDisabled: (status: onboardingRequestStatusResponse) => boolean;
    handleClick: (event: any, status: onboardingRequestStatusResponse, goToOnboarding: () => void) => void;
};

export { BaseButtonProps, CrossmintModalServiceReturn, CrossmintPayButtonProps, OnboardingQueryParams, PayButtonConfig, SigninMethods, baseUrls, clientNames, crossmintModalService, crossmintPayButtonService, crossmintStatusButtonService, crossmintStatusService, customHeaders, generateClientId, mintingContractTypes, onboardingRequestStatusResponse, paymentMethodIsEth, paymentMethodIsSol, paymentMethods };
