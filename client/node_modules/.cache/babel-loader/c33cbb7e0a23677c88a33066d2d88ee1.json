{"ast":null,"code":"var _jsxFileName = \"/Users/rami/Desktop/metalyde/Metalyde 2/testLux/client/src/contexts/EthContext/EthProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useCallback } from \"react\";\nimport { useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  // const [] = useState();\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n      const accounts = await web3.eth.requestAccounts();\n      const networkID = await web3.eth.net.getId();\n      const {\n        abi\n      } = artifact;\n      let address, contract, isOwner, isMintOn, mintPrice;\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n        const owner = await contract.methods.owner().call();\n        if (accounts[0] === owner) {\n          isOwner = true;\n        } else {\n          isOwner = false;\n        }\n        const mintState = await contract.methods.isMintOn().call();\n        if (mintState === true) {\n          isMintOn = true;\n        } else {\n          isMintOn = false;\n        }\n        const mintPriceData = await contract.methods.checkPrice().call();\n        mintPrice = mintPriceData;\n      } catch (err) {\n        console.error(err);\n        console.log(\"rrrr\");\n      }\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract,\n          isOwner,\n          isMintOn,\n          mintPrice\n        }\n      });\n    }\n  }, []);\n  const [isConnect, setConnected] = useState(false);\n  const handleConnectWallet = async () => {\n    const artifact = require(\"../../contracts/Nft.json\");\n    await init(artifact);\n    setConnected(true);\n  };\n  // useEffect(() => {\n  //   const tryInit = async () => {\n  //     try {\n  //       const artifact = require(\"../../contracts/Nft.json\");\n  //       init(artifact);\n  //     } catch (err) {\n  //       console.error(err);\n  //       console.log(\"C'est kk\");\n  //     }\n  //   };\n\n  //   tryInit();\n  // }, [init]);\n\n  // useEffect(() => {\n  //   const events = [\"chainChanged\", \"accountsChanged\"];\n  //   const handleChange = () => {\n  //     init(state.artifact);\n  //   };\n\n  //   events.forEach(e => window.ethereum.on(e, handleChange));\n  //   return () => {\n  //     events.forEach(e => window.ethereum.removeListener(e, handleChange));\n  //   };\n  // }, [init, state.artifact]);\n\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch,\n      handleConnectWallet,\n      isConnect\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(EthProvider, \"YPUiKGPH2K2CcYobK1XeduTIxRI=\");\n_c = EthProvider;\nexport default EthProvider;\nvar _c;\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useState","Web3","EthContext","reducer","actions","initialState","EthProvider","children","state","dispatch","init","artifact","web3","givenProvider","accounts","eth","requestAccounts","networkID","net","getId","abi","address","contract","isOwner","isMintOn","mintPrice","networks","Contract","owner","methods","call","mintState","mintPriceData","checkPrice","err","console","error","log","type","data","isConnect","setConnected","handleConnectWallet","require"],"sources":["/Users/rami/Desktop/metalyde/Metalyde 2/testLux/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback } from \"react\";\nimport { useState } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  // const [] = useState();\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        const { abi } = artifact;\n        let address, contract, isOwner, isMintOn, mintPrice;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n          const owner = await contract.methods.owner().call();\n          if (accounts[0] === owner) {\n            isOwner = true;\n          } else {\n            isOwner= false;\n          }\n          const mintState = await contract.methods.isMintOn().call();\n          if (mintState === true) {\n            isMintOn = true;\n          } else {\n            isMintOn = false\n          }\n          const mintPriceData = await contract.methods.checkPrice().call();\n          mintPrice = mintPriceData;\n        } catch (err) {\n          console.error(err);\n          console.log(\"rrrr\");\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract, isOwner, isMintOn, mintPrice }\n        });\n      }\n    }, []);\n\n  const [isConnect, setConnected] = useState(false);\n  const handleConnectWallet =  async () => {\n      const artifact = require(\"../../contracts/Nft.json\");\n      await init(artifact);\n      setConnected(true);\n}\n  // useEffect(() => {\n  //   const tryInit = async () => {\n  //     try {\n  //       const artifact = require(\"../../contracts/Nft.json\");\n  //       init(artifact);\n  //     } catch (err) {\n  //       console.error(err);\n  //       console.log(\"C'est kk\");\n  //     }\n  //   };\n\n  //   tryInit();\n  // }, [init]);\n\n  // useEffect(() => {\n  //   const events = [\"chainChanged\", \"accountsChanged\"];\n  //   const handleChange = () => {\n  //     init(state.artifact);\n  //   };\n\n  //   events.forEach(e => window.ethereum.on(e, handleChange));\n  //   return () => {\n  //     events.forEach(e => window.ethereum.removeListener(e, handleChange));\n  //   };\n  // }, [init, state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch,\n      handleConnectWallet,\n      isConnect\n    }}\n    >\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AACtD,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,OAAO,EAAEC,OAAO,EAAEC,YAAY,QAAQ,SAAS;AAAC;AAEzD,SAASC,WAAW,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,UAAU,CAACK,OAAO,EAAEE,YAAY,CAAC;EAC3D;EACA,MAAMK,IAAI,GAAGX,WAAW,CACtB,MAAMY,QAAQ,IAAI;IAChB,IAAIA,QAAQ,EAAE;MACZ,MAAMC,IAAI,GAAG,IAAIX,IAAI,CAACA,IAAI,CAACY,aAAa,IAAI,qBAAqB,CAAC;MAClE,MAAMC,QAAQ,GAAG,MAAMF,IAAI,CAACG,GAAG,CAACC,eAAe,EAAE;MACjD,MAAMC,SAAS,GAAG,MAAML,IAAI,CAACG,GAAG,CAACG,GAAG,CAACC,KAAK,EAAE;MAC5C,MAAM;QAAEC;MAAI,CAAC,GAAGT,QAAQ;MACxB,IAAIU,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,SAAS;MACnD,IAAI;QACFJ,OAAO,GAAGV,QAAQ,CAACe,QAAQ,CAACT,SAAS,CAAC,CAACI,OAAO;QAC9CC,QAAQ,GAAG,IAAIV,IAAI,CAACG,GAAG,CAACY,QAAQ,CAACP,GAAG,EAAEC,OAAO,CAAC;QAC9C,MAAMO,KAAK,GAAG,MAAMN,QAAQ,CAACO,OAAO,CAACD,KAAK,EAAE,CAACE,IAAI,EAAE;QACnD,IAAIhB,QAAQ,CAAC,CAAC,CAAC,KAAKc,KAAK,EAAE;UACzBL,OAAO,GAAG,IAAI;QAChB,CAAC,MAAM;UACLA,OAAO,GAAE,KAAK;QAChB;QACA,MAAMQ,SAAS,GAAG,MAAMT,QAAQ,CAACO,OAAO,CAACL,QAAQ,EAAE,CAACM,IAAI,EAAE;QAC1D,IAAIC,SAAS,KAAK,IAAI,EAAE;UACtBP,QAAQ,GAAG,IAAI;QACjB,CAAC,MAAM;UACLA,QAAQ,GAAG,KAAK;QAClB;QACA,MAAMQ,aAAa,GAAG,MAAMV,QAAQ,CAACO,OAAO,CAACI,UAAU,EAAE,CAACH,IAAI,EAAE;QAChEL,SAAS,GAAGO,aAAa;MAC3B,CAAC,CAAC,OAAOE,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;QAClBC,OAAO,CAACE,GAAG,CAAC,MAAM,CAAC;MACrB;MACA5B,QAAQ,CAAC;QACP6B,IAAI,EAAElC,OAAO,CAACM,IAAI;QAClB6B,IAAI,EAAE;UAAE5B,QAAQ;UAAEC,IAAI;UAAEE,QAAQ;UAAEG,SAAS;UAAEK,QAAQ;UAAEC,OAAO;UAAEC,QAAQ;UAAEC;QAAU;MACtF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAER,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM0C,mBAAmB,GAAI,YAAY;IACrC,MAAM/B,QAAQ,GAAGgC,OAAO,CAAC,0BAA0B,CAAC;IACpD,MAAMjC,IAAI,CAACC,QAAQ,CAAC;IACpB8B,YAAY,CAAC,IAAI,CAAC;EACxB,CAAC;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA,oBACE,QAAC,UAAU,CAAC,QAAQ;IAAC,KAAK,EAAE;MAC1BjC,KAAK;MACLC,QAAQ;MACRiC,mBAAmB;MACnBF;IACF,CAAE;IAAA,UAECjC;EAAQ;IAAA;IAAA;IAAA;EAAA,QACW;AAE1B;AAAC,GAlFQD,WAAW;AAAA,KAAXA,WAAW;AAoFpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}