{"ast":null,"code":"import warning from 'tiny-warning';\nvar semiWithNl = /;\\n/;\n/**\n * Naive CSS parser.\n * - Supports only rule body (no selectors)\n * - Requires semicolon and new line after the value (except of last line)\n * - No nested rules support\n */\n\nvar parse = function parse(cssText) {\n  var style = {};\n  var split = cssText.split(semiWithNl);\n  for (var i = 0; i < split.length; i++) {\n    var decl = (split[i] || '').trim();\n    if (!decl) continue;\n    var colonIndex = decl.indexOf(':');\n    if (colonIndex === -1) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Malformed CSS string \\\"\" + decl + \"\\\"\") : void 0;\n      continue;\n    }\n    var prop = decl.substr(0, colonIndex).trim();\n    var value = decl.substr(colonIndex + 1).trim();\n    style[prop] = value;\n  }\n  return style;\n};\nvar onProcessRule = function onProcessRule(rule) {\n  if (typeof rule.style === 'string') {\n    rule.style = parse(rule.style);\n  }\n};\nfunction templatePlugin() {\n  return {\n    onProcessRule: onProcessRule\n  };\n}\nexport default templatePlugin;","map":{"version":3,"names":["warning","semiWithNl","parse","cssText","style","split","i","length","decl","trim","colonIndex","indexOf","process","env","NODE_ENV","prop","substr","value","onProcessRule","rule","templatePlugin"],"sources":["/Users/rami/Desktop/metalyde/Metalyde 2/testLux/client/node_modules/jss-plugin-template/dist/jss-plugin-template.esm.js"],"sourcesContent":["import warning from 'tiny-warning';\n\nvar semiWithNl = /;\\n/;\n/**\n * Naive CSS parser.\n * - Supports only rule body (no selectors)\n * - Requires semicolon and new line after the value (except of last line)\n * - No nested rules support\n */\n\nvar parse = function parse(cssText) {\n  var style = {};\n  var split = cssText.split(semiWithNl);\n\n  for (var i = 0; i < split.length; i++) {\n    var decl = (split[i] || '').trim();\n    if (!decl) continue;\n    var colonIndex = decl.indexOf(':');\n\n    if (colonIndex === -1) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, \"[JSS] Malformed CSS string \\\"\" + decl + \"\\\"\") : void 0;\n      continue;\n    }\n\n    var prop = decl.substr(0, colonIndex).trim();\n    var value = decl.substr(colonIndex + 1).trim();\n    style[prop] = value;\n  }\n\n  return style;\n};\n\nvar onProcessRule = function onProcessRule(rule) {\n  if (typeof rule.style === 'string') {\n    rule.style = parse(rule.style);\n  }\n};\n\nfunction templatePlugin() {\n  return {\n    onProcessRule: onProcessRule\n  };\n}\n\nexport default templatePlugin;\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,cAAc;AAElC,IAAIC,UAAU,GAAG,KAAK;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,KAAK,GAAG,SAASA,KAAK,CAACC,OAAO,EAAE;EAClC,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,KAAK,GAAGF,OAAO,CAACE,KAAK,CAACJ,UAAU,CAAC;EAErC,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACrC,IAAIE,IAAI,GAAG,CAACH,KAAK,CAACC,CAAC,CAAC,IAAI,EAAE,EAAEG,IAAI,EAAE;IAClC,IAAI,CAACD,IAAI,EAAE;IACX,IAAIE,UAAU,GAAGF,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC;IAElC,IAAID,UAAU,KAAK,CAAC,CAAC,EAAE;MACrBE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGd,OAAO,CAAC,KAAK,EAAE,+BAA+B,GAAGQ,IAAI,GAAG,IAAI,CAAC,GAAG,KAAK,CAAC;MAC9G;IACF;IAEA,IAAIO,IAAI,GAAGP,IAAI,CAACQ,MAAM,CAAC,CAAC,EAAEN,UAAU,CAAC,CAACD,IAAI,EAAE;IAC5C,IAAIQ,KAAK,GAAGT,IAAI,CAACQ,MAAM,CAACN,UAAU,GAAG,CAAC,CAAC,CAACD,IAAI,EAAE;IAC9CL,KAAK,CAACW,IAAI,CAAC,GAAGE,KAAK;EACrB;EAEA,OAAOb,KAAK;AACd,CAAC;AAED,IAAIc,aAAa,GAAG,SAASA,aAAa,CAACC,IAAI,EAAE;EAC/C,IAAI,OAAOA,IAAI,CAACf,KAAK,KAAK,QAAQ,EAAE;IAClCe,IAAI,CAACf,KAAK,GAAGF,KAAK,CAACiB,IAAI,CAACf,KAAK,CAAC;EAChC;AACF,CAAC;AAED,SAASgB,cAAc,GAAG;EACxB,OAAO;IACLF,aAAa,EAAEA;EACjB,CAAC;AACH;AAEA,eAAeE,cAAc"},"metadata":{},"sourceType":"module"}