{"ast":null,"code":"var _jsxFileName = \"/Users/rami/Documents/Dev/LUX : Metalyde/Mintpage/Metakyde-Lux/Metalyde-Lux-Christmas-Raffle/client/src/contexts/EthContext/EthProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EthProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const init = useCallback(async artifact => {\n    // if (artifact) {\n    //   const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n    //   const accounts = await web3.eth.requestAccounts();\n    //   const networkID = await web3.eth.net.getId();\n    //   const { abi } = artifact;\n    //   let address, contract, isOwner, isMintOn, mintPrice;\n    //   try {\n    //     address = artifact.networks[networkID].address;\n    //     contract = new web3.eth.Contract(abi, address);\n    //     const owner = await contract.methods.owner().call();\n    //     if (accounts[0] === owner) {\n    //       isOwner = true;\n    //     } else {\n    //       isOwner= false;\n    //     }\n    //     const mintState = await contract.methods.isMintOn().call();\n    //     if (mintState === true) {\n    //       isMintOn = true;\n    //     } else {\n    //       isMintOn = false\n    //     }\n    //     const mintPriceData = await contract.methods.checkPrice().call();\n    //     mintPrice = mintPriceData;\n    //   } catch (err) {\n    //     console.error(err);\n    //   }\n    //   dispatch({\n    //     type: actions.init,\n    //     data: { artifact, web3, accounts, networkID, contract, isOwner, isMintOn, mintPrice }\n    //   });\n    // }\n  }, []);\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/Nft.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(EthProvider, \"hc888FM+IczqCNE4rWyvjI+TMdU=\");\n_c = EthProvider;\nexport default EthProvider;\nvar _c;\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","Web3","EthContext","reducer","actions","initialState","EthProvider","children","state","dispatch","init","artifact","tryInit","require","err","console","error","events","handleChange","forEach","e","window","ethereum","on","removeListener"],"sources":["/Users/rami/Documents/Dev/LUX : Metalyde/Mintpage/Metakyde-Lux/Metalyde-Lux-Christmas-Raffle/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async artifact => {\n      // if (artifact) {\n      //   const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n      //   const accounts = await web3.eth.requestAccounts();\n      //   const networkID = await web3.eth.net.getId();\n      //   const { abi } = artifact;\n      //   let address, contract, isOwner, isMintOn, mintPrice;\n      //   try {\n      //     address = artifact.networks[networkID].address;\n      //     contract = new web3.eth.Contract(abi, address);\n      //     const owner = await contract.methods.owner().call();\n      //     if (accounts[0] === owner) {\n      //       isOwner = true;\n      //     } else {\n      //       isOwner= false;\n      //     }\n      //     const mintState = await contract.methods.isMintOn().call();\n      //     if (mintState === true) {\n      //       isMintOn = true;\n      //     } else {\n      //       isMintOn = false\n      //     }\n      //     const mintPriceData = await contract.methods.checkPrice().call();\n      //     mintPrice = mintPriceData;\n      //   } catch (err) {\n      //     console.error(err);\n      //   }\n      //   dispatch({\n      //     type: actions.init,\n      //     data: { artifact, web3, accounts, networkID, contract, isOwner, isMintOn, mintPrice }\n      //   });\n      // }\n    }, []);\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/Nft.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,OAAO,EAAEC,OAAO,EAAEC,YAAY,QAAQ,SAAS;AAAC;AAEzD,SAASC,WAAW,OAAe;EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,UAAU,CAACK,OAAO,EAAEE,YAAY,CAAC;EAE3D,MAAMK,IAAI,GAAGX,WAAW,CACtB,MAAMY,QAAQ,IAAI;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD,EAAE,EAAE,CAAC;EAERX,SAAS,CAAC,MAAM;IACd,MAAMY,OAAO,GAAG,YAAY;MAC1B,IAAI;QACF,MAAMD,QAAQ,GAAGE,OAAO,CAAC,0BAA0B,CAAC;QACpDH,IAAI,CAACC,QAAQ,CAAC;MAChB,CAAC,CAAC,OAAOG,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MACpB;IACF,CAAC;IAEDF,OAAO,EAAE;EACX,CAAC,EAAE,CAACF,IAAI,CAAC,CAAC;EAEVV,SAAS,CAAC,MAAM;IACd,MAAMiB,MAAM,GAAG,CAAC,cAAc,EAAE,iBAAiB,CAAC;IAClD,MAAMC,YAAY,GAAG,MAAM;MACzBR,IAAI,CAACF,KAAK,CAACG,QAAQ,CAAC;IACtB,CAAC;IAEDM,MAAM,CAACE,OAAO,CAACC,CAAC,IAAIC,MAAM,CAACC,QAAQ,CAACC,EAAE,CAACH,CAAC,EAAEF,YAAY,CAAC,CAAC;IACxD,OAAO,MAAM;MACXD,MAAM,CAACE,OAAO,CAACC,CAAC,IAAIC,MAAM,CAACC,QAAQ,CAACE,cAAc,CAACJ,CAAC,EAAEF,YAAY,CAAC,CAAC;IACtE,CAAC;EACH,CAAC,EAAE,CAACR,IAAI,EAAEF,KAAK,CAACG,QAAQ,CAAC,CAAC;EAE1B,oBACE,QAAC,UAAU,CAAC,QAAQ;IAAC,KAAK,EAAE;MAC1BH,KAAK;MACLC;IACF,CAAE;IAAA,UACCF;EAAQ;IAAA;IAAA;IAAA;EAAA,QACW;AAE1B;AAAC,GAvEQD,WAAW;AAAA,KAAXA,WAAW;AAyEpB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module"}